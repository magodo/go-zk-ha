@startuml
hide empty description
skinparam defaultTextAlignment left

skinparam state {
  StartColor Black
  EndColor Red
  BackgroundColor LightBlue
  BorderColor Gray
  FontName Impact
}

[*] --> InitState: connect to zk cluster  (acquire default watcher)
InitState: watch "default watcher"

InitState -down-> RaceState: [StateHasSession]
RaceState: try to create ephemeral znode,\notherwise create existance watcher

RaceState -down-> MasterState: [ok]\n - launch business logic
RaceState -down-> WatchState: [nok]\n- pass the "watcher" to next state

WatchState: - watch "default watcher"\n- watch "existence watcher"
WatchState -up-> RaceState: [EventNodeDelete]
WatchState -down-> WatchClosedState: [StateDisconnected]
WatchClosedState: watch "default watcher"
WatchClosedState -up-> WatchState: [StateHasSession]
WatchClosedState -up-> InitState: [StateExpired]

MasterState: watch "default watcher"
MasterState -down[#blue]-> MasterClosingState: [StateDisconnected]\nor\n[exit]
MasterClosingState: (conservatively) stop business tasks\nthen watch default 
MasterClosingState -down-> MasterClosedState: [stop within timeout]
MasterClosingState -down[dashed]-> ExitState: [stop exceeds timeout]
MasterClosedState: watch "default watcher"
MasterClosedState -up-> MasterState: [StateHasSession]\n - launch business tasks
MasterClosedState -up-> InitState: [StateExpired]

InitState -down[dashed]-> ExitState: [exit]
RaceState -down[dashed]-> ExitState: [exit]
MasterClosedState -down[dashed]-> ExitState: [exit]
WatchState -down[dashed]-> ExitState: [exit]
WatchClosedState -down[dashed]-> ExitState: [exit]

ExitState: - close zk connection\n- exit process

legend
| term | comment |
| trigger: [exit] | represents signal SIGTERM/SIGQUIT|
| trigger: [EventXXX]   | represents the "type" property of Event accepted by watcher    |
| trigger: [StateXXX]   | represents the "state" property of Event accepted by watcher    |
endlegend

@enduml
